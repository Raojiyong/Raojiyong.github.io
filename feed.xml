<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://raojiyong.github.io/</id><title>Jiyong Rao</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2022-01-17T12:06:29+08:00</updated> <author> <name>raojiyong</name> <uri>https://raojiyong.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://raojiyong.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://raojiyong.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2022 raojiyong </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>矩阵复习笔记</title><link href="https://raojiyong.github.io/posts/%E7%9F%A9%E9%98%B5%E5%88%86%E6%9E%90%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/" rel="alternate" type="text/html" title="矩阵复习笔记" /><published>2021-12-28T13:00:00+08:00</published> <updated>2021-12-28T21:43:12+08:00</updated> <id>https://raojiyong.github.io/posts/%E7%9F%A9%E9%98%B5%E5%88%86%E6%9E%90%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/</id> <content src="https://raojiyong.github.io/posts/%E7%9F%A9%E9%98%B5%E5%88%86%E6%9E%90%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/" /> <author> <name>raojiyong</name> </author> <category term="2021" /> <category term="12" /> <summary> 修改时间：2021.12.28 1. 线性空间与线性变换 （1）线性空间的定义： 以 $\alpha, \beta, \gamma,\dots\text{为元素的非空集合}V, \text{数域}F$ 定义两种运算：==加法== $\forall \alpha , \beta \in V, \; \alpha + \beta \in V$；==数乘== $\forall k \in F, \alpha \in V, k \alpha \in V$。 满足8条：加法交换律、加法结合律、数乘结合律、两个分配律，0元存在，1元存在，负元存在。称 $V$为数域$F$上的线性空间。 （2）证明一组向量是线性空间的基，两步走： 证明这组向量线性无关； 证明线性空间任意向量可由这组向量表示。 （3）如果\(\{E_{ij}, i=1,2,...,... </summary> </entry> <entry><title>Video</title><link href="https://raojiyong.github.io/posts/video/" rel="alternate" type="text/html" title="Video" /><published>2021-12-09T15:00:00+08:00</published> <updated>2021-12-16T19:30:01+08:00</updated> <id>https://raojiyong.github.io/posts/video/</id> <content src="https://raojiyong.github.io/posts/video/" /> <author> <name>raojiyong</name> </author> <category term="2021" /> <category term="12" /> <summary> Video Video = 2D + Time A video is a sequence of images 4D tensor: $T\times3\times H\times W$ Training on Clips Raw video: Long, high FPS Training: Train model to classify short clips with low FPS Testing: Run model on different clips, average predictions. Video classification: Single-Frame CNN Simple idea: train normal 2D CNN to classify video frame independently. (Average pre... </summary> </entry> <entry><title>Mac OS VSCode配置stdc++.h头文件</title><link href="https://raojiyong.github.io/posts/VSCode%E9%85%8D%E7%BD%AEstdc++%E5%A4%B4%E6%96%87%E4%BB%B6/" rel="alternate" type="text/html" title="Mac OS VSCode配置stdc++.h头文件" /><published>2021-11-28T22:00:00+08:00</published> <updated>2021-11-28T22:00:00+08:00</updated> <id>https://raojiyong.github.io/posts/VSCode%E9%85%8D%E7%BD%AEstdc++%E5%A4%B4%E6%96%87%E4%BB%B6/</id> <content src="https://raojiyong.github.io/posts/VSCode%E9%85%8D%E7%BD%AEstdc++%E5%A4%B4%E6%96%87%E4%BB%B6/" /> <author> <name>raojiyong</name> </author> <category term="2021" /> <category term="11" /> <summary> VSCode 配置万能头文件stdc++.h mac自带的clang就没办法直接include bits/stdc++.h，苦恼了一下午，终于找到了解决方法。 解决方法就是在“includePath”中添加自己写的stdc++.h 首先输入gcc -v -E -x c++ -找到地址 /Library/Developer/CommandLineTools/usr/include/c++/v1 在访达中输入shift+command+g复制上述地址，并写文件stdc++.h，常用的头文件都可以加在endif前 // C++ includes used for precompiling -*- C++ -*- // Copyright (C) 2003-2015 Free Software F... </summary> </entry> <entry><title>Generative Learning algorithms</title><link href="https://raojiyong.github.io/posts/GDA_NB/" rel="alternate" type="text/html" title="Generative Learning algorithms" /><published>2021-10-27T22:30:00+08:00</published> <updated>2021-12-09T16:45:42+08:00</updated> <id>https://raojiyong.github.io/posts/GDA_NB/</id> <content src="https://raojiyong.github.io/posts/GDA_NB/" /> <author> <name>raojiyong</name> </author> <category term="2021" /> <category term="10" /> <summary> Generative Learning algorithms discriminative learning algorithms: Algorithms that try to learn $p(y\vert x)$ directly (such as logistic regression) or algorithms that try to learn mappings directly from the space of inputs $\mathcal{X}$ to the labels {0,1} (such as perceptron). generative learning algorithms: instead try to model $p(x\vert y)$ (and $p(y)$). For instance, if $y$ indicates whe... </summary> </entry> <entry><title>Review of Probability Theory</title><link href="https://raojiyong.github.io/posts/Prob/" rel="alternate" type="text/html" title="Review of Probability Theory" /><published>2021-10-27T15:00:00+08:00</published> <updated>2021-10-27T16:55:28+08:00</updated> <id>https://raojiyong.github.io/posts/Prob/</id> <content src="https://raojiyong.github.io/posts/Prob/" /> <author> <name>raojiyong</name> </author> <category term="2021" /> <category term="10" /> <summary> Multiple random variables 基本性质 $X_1,X_2,\dots,X_n$的联合分布函数 $F_{X_1,X_2,\dots,X_n}(x_1,x_2,\dots,x_n)=P(X\le x_1,X_2\le x_2,\dots,X_n\le x_n)$ 联合概率密度函数 $f_{X_1,X_2,\dots,X_n}(x_1,x_2,\dots,x_n)=\frac{\partial^nF_{X_1,X_2,\dots,X_n}(x_1,x_2,\dots,x_n)}{\partial x_1,\dots,\partial x_n}$ $X_1$的边缘密度函数 $f_{X_1}(X_1)=\int_{-\infty}^{\infty}\cdots\int_{-\infty}^{\infty}f_{X_1,X_2,\dots,X_n}(x_1,x... </summary> </entry> </feed>
